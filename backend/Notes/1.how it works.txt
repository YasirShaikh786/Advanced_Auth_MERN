##############    WORKING OF auth_controller         #################################



1.SIGNUP :

a) IN auth_controller.js WE HAVE SIGNUP FUNCTION WHERE IT FIRST RECEIVES EMAIL PASSWORD AND NAME THROUGH re.body, THEN VALIDATIONS ARE DONE ONCE
DONE WE HASH THE PASSOWRD, PRODUCE A RANDOM VERIFICATIONTOKEN 

b)NOW WE CREATE A USER WITH HASSHED PASSOWRD EMAIL,NAME, VERIFICATIONTOKEN AND EXPIRYDATE OF TOKEN  

c)WE SAVE THE USER 

d) WE GENERATE A A TOKEN USING user_id  WITH JWT SECRET BY CALLING generateTokenAndSetCookie(res,user._id); AND RECIVE COOKIES.

e)NOW WE USE FUNCTION await sendVerificationEmail(user.email,user.verficationToken);  TO SEND VERIFICATION EMAIL USING MAILTRAP,
LOGIC IS DONE IN email.js IN mailtrap FOLDER

f) SIGNUP ENDS HERE.


2.VERIFY-EMAIL :

a) WE RECIVE CODE FROM req.body 

b) THEN USER WITH THAT CODE IS SEARCHED USING  .findOne IF USER FOUND THAN EMAIL IS VERIFIED AS CODE MATCHES

c) THEN WE SET  user.isVerified = true;
                user.verficationToken = undefined;
                user.verficationTokenExpire = undefined;
AS TOKEN IS NOMORE REQUIRED AFTER VERIFICATION IS DONE TGEN WE SAVE USER

d)THEN WE SEND AN WELCOMEEMAIL TO THE USER USING  await sendWelcomeEmail(user.email,user.name);    USING MAILTRAP,
LOGIC IS DONE IN email.js IN mailtrap FOLDER

e) VERIFICATION OF EMAIL IS DONE


3.LOGOUT :

a) WE JUST HAVE TO CLEAR THE COOKIES THAT WE SET USING  generateTokenAndSetCookie(res,user._id); IN SIGNUP

b) EASYILY LOOGED OUT 


4. LOGIN :

a) WE RECIVE EMAIL AND PASSWORD FROM USER

b) WE CHECK EMAIL AND PASSWORD 

c) IF PASSWORD AND EMAIL ARE RIGHT WE GENERATE COOKIES AND TOKEN USIONG generateTokenAndSetCookie(res,user._id);

d) THEN WE UPDATE LASTLOGINAT OF USER AND SAVE IT  SEND A RESPONSE.

E) LOGIN IS DONE 


5.FORGOT PASSOWRD:

a)IT GETS EMAIL FO=ROM req.body AND CHECHK EMAIL IS PRESENT OR NOT

b)THEN RESET PASSWORD TOKEN IS GENERATED USING CRYPTO   const resetPasswordToken = crypto.randomBytes(20).toString("hex");

c) PASSWORD TOKEN AND TOKEN EXPIRIY IS ADDED TO DATABSE OF THAT USER AND SAVED

d)PASSWORD RESET EMAIL IS SEND WITH AN URL TO REDIRECT TO A SPECIFIC SECURE SITE USEING TOKEN IN URL
await sendPasswordResetEmail(user.email,`${process.env.CLIENT_URL}/reset-password/${resetPasswordToken}`);

E) AFTER THIS WE CLICK ON LINK IN THE EMAIL WE SEND AND RESET OUR PASSWORD USING FUNCTION  resetPassword();




6. RESET PASSWORD:

a)TOKEN AND PASSWORD ARE RECEIVED THEN ARE CHECKED 

b) THEN FROM USER IN  WE RECIVE NEW PASSWORD AND STORE IT IN DATA BASE AND REMOVE RESET PASSWORD TOKEN AND EXPIRY

c) SAVE USER AND SEND PASSWORD SUCCEFULY CHANGED EMAIL BY  await sendResetSuccessEmail(user.email);

d) DONE WITH PASSWORD RESET 


7.CHECK AUTHENTICATION

a)BEFORE CHECK AUTH TOKEN VERIFICATION IS DONE IN veriofyToken.js IN middleware USED WITH NEXT, WE GET USER ID FROM HERE TO USE IN CHECK AUTH

b)USER ID ISTAKEN AND CHECKED IF IT IS RIGHT SUCCES:TRUE OR ELSE AN ERROR IS SHOW

c) THIS IS HOW VERIFICATION IS DONE.









